
function [fs, y_3] = process_sound(y, fs, bits)

% Making sure that the time is in the first dimension
if size(y,1) < size(y,2)
    y = y';
end

% 3.2. Use size to check whether the input sound is stereo
% (2 channels/columns) or mono (1 channel/column). Use if: If stereo, add
% the two columns to make it single channel (or a 1-column array).
if size(y,2) == 2
    y_2 = y(:,1)+y(:,2);
elseif size(y,2) > 2
    display('Error: Not mono nor stereo. The audio recording is has size: ');
    display(size(y));
    return;
else
    y_2 = y(:,1);
end

% 3.3 Play the sound in Matlab
sound(y_2, fs);
pause(size(y_2,1)/fs);
clear sound;

% 3.4 Write the sound to a new file
save('audio_return.mat','y_2');

% 3.5 Plot the sound waveform of one of your sound files as a function of
% the sample number.
figure; plot(1:length(y_2),y_2);

% 3.6. If the sampling rate of the input signal is not 16 kHz, downsample
% it to 16 kHz (resample). (If the original sampling rate is less than 16
% kHz, it is much better to redo 3.1)
desired_fs = 16e3;
y_3 = resample(y_2,desired_fs,fs);
fs = desired_fs;

% 3.7. Generate a signal using the cosine function (cos) that oscillates at
% 1 kHz with the same time duration and array length (Task 3.2) as the
% input signal (you know the sampling rate, right?). Play the sound
% generated by signal and plot two cycles of its waveform as a function of
% time.
% cos_signal = cos(2*pi*1e3/fs:2*pi*1e3/fs:2*pi*1e3/fs*length(y_3));
% cos_signal_first_val = cos_signal(1);
% sound(cos_signal, fs);
% figure; plot(1/fs:fs/1e3*2,cos_signal(1:floor(fs/1e3*2)));

end